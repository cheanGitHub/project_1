<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:util="http://www.springframework.org/schema/util" xmlns:jdbc="http://www.springframework.org/schema/jdbc"
       xmlns:cache="http://www.springframework.org/schema/cache" xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation="http://www.springframework.org/schema/context
    http://www.springframework.org/schema/context/spring-context.xsd
    http://www.springframework.org/schema/beans
    http://www.springframework.org/schema/beans/spring-beans.xsd
    http://www.springframework.org/schema/tx
    http://www.springframework.org/schema/tx/spring-tx.xsd
    http://www.springframework.org/schema/jdbc
    http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
    http://www.springframework.org/schema/cache
    http://www.springframework.org/schema/cache/spring-cache-3.1.xsd
    http://www.springframework.org/schema/aop
    http://www.springframework.org/schema/aop/spring-aop.xsd
    http://www.springframework.org/schema/util
    http://www.springframework.org/schema/util/spring-util.xsd
    http://www.springframework.org/schema/task
    http://www.springframework.org/schema/task/spring-task.xsd" profile="dev">

    <!--<context:annotation-config />-->
    <context:component-scan base-package="com.cc.user.service,com.cc.mybatis"/>


    <!-- 配置 读取properties文件 jdbc.properties -->
    <context:property-placeholder location="classpath:*.properties"/>


    <!-- 配置数据源 -->
    <!--2 配置C3P0数据源 -->
    <bean id="dataSource_master" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!--驱动类名 -->
        <property name="driverClass" value="${jdbc.driver}"/>
        <!-- url -->
        <property name="jdbcUrl" value="${jdbc.url}"/>
        <!-- 用户名 -->
        <property name="user" value="${jdbc.username}"/>
        <!-- 密码 -->
        <property name="password" value="${jdbc.password}"/>

        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  -->
        <property name="acquireIncrement" value="5"></property>
        <!-- 初始连接池大小 -->
        <property name="initialPoolSize" value="10"></property>
        <!-- 连接池中连接最小个数 -->
        <property name="minPoolSize" value="5"></property>
        <!-- 连接池中连接最大个数 -->
        <property name="maxPoolSize" value="20"></property>
    </bean>

    <bean id="dataSource_slave" class="com.mchange.v2.c3p0.ComboPooledDataSource" destroy-method="close">
        <!--驱动类名 -->
        <property name="driverClass" value="${jdbc.driver}"/>
        <!-- url -->
        <property name="jdbcUrl" value="${jdbc.url_slave}"/>
        <!-- 用户名 -->
        <property name="user" value="${jdbc.username}"/>
        <!-- 密码 -->
        <property name="password" value="${jdbc.password}"/>

        <!-- 当连接池中的连接耗尽的时候c3p0一次同时获取的连接数  -->
        <property name="acquireIncrement" value="5"></property>
        <!-- 初始连接池大小 -->
        <property name="initialPoolSize" value="10"></property>
        <!-- 连接池中连接最小个数 -->
        <property name="minPoolSize" value="5"></property>
        <!-- 连接池中连接最大个数 -->
        <property name="maxPoolSize" value="20"></property>
    </bean>
    <!--<bean id="dataSource" class="com.jolbox.bonecp.BoneCPDataSource"
              destroy-method="close">
            &lt;!&ndash; 数据库驱动 &ndash;&gt;
            <property name="driverClass" value="${jdbc.driver}"/>
            &lt;!&ndash; 相应驱动的jdbcUrl &ndash;&gt;
            <property name="jdbcUrl" value="${jdbc.url}"/>
            &lt;!&ndash; 数据库的用户名 &ndash;&gt;
            <property name="username" value="${jdbc.username}"/>
            &lt;!&ndash; 数据库的密码 &ndash;&gt;
            <property name="password" value="${jdbc.password}"/>
            &lt;!&ndash; 检查数据库连接池中空闲连接的间隔时间，单位是分，默认值：240，如果要取消则设置为0 &ndash;&gt;
            <property name="idleConnectionTestPeriod" value="60"/>
            &lt;!&ndash; 连接池中未使用的链接最大存活时间，单位是分，默认值：60，如果要永远存活设置为0 &ndash;&gt;
            <property name="idleMaxAge" value="30"/>
            &lt;!&ndash; 每个分区最大的连接数 &ndash;&gt;
            <property name="maxConnectionsPerPartition" value="150"/>
            &lt;!&ndash; 每个分区最小的连接数 &ndash;&gt;
            <property name="minConnectionsPerPartition" value="5"/>
        </bean>-->

    <!--配置sqlSessionFactory对象-->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="myDataSource"/>
        <property name="configLocation" value="classpath:SqlMapConfig.xml"/>
        <property name="mapperLocations" value="classpath:mapper/*.xml"/>
        <property name="typeAliasesPackage" value="com.cc.user.domain"/>
    </bean>

    <!--配置dao包扫描-->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.cc.user.dao"/>
    </bean>

    <!-- 对dataSource 数据源进行事务管理 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:dataSource-ref="myDataSource"/>

    <!-- 启用对事务注解的支持 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <bean id="myDataSource" class="com.cc.mybatis.MyDataSource">
        <property name="targetDataSources">
            <util:map key-type="java.lang.String">
                <entry key="master" value-ref="dataSource_master"/>
                <entry key="slave" value-ref="dataSource_slave"/>
            </util:map>
        </property>
    </bean>


    <!--<bean class="com.huawei.spring.MyFactoryBean"/>-->
    <!--<bean name="user" class="com.huawei.TestAnnoMainAnnoMain" />-->

    <!--<aop:aspectj-autoproxy proxy-target-class="false" expose-proxy="false"/>-->
    <!--<bean class="com.huawei.spring.AopTestWorker" />-->
    <!--<bean class="com.huawei.spring.AopTestAspectBean" />-->
    <!--<aop:config proxy-target-class="false" expose-proxy="false"/>-->
    <!--<context:load-time-weaver weaver-class="" aspectj-weaving="" />-->
    <!--<aop:scoped-proxy />-->
    <!--<aop:include />-->
    <!--<context:spring-configured />-->

    <!--<task:scheduled-tasks>-->
    <!--<task:scheduled ref="" method=""/>-->
    <!--</task:scheduled-tasks>-->
    <!--<task:executor id="" />-->

    <!--<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" mode="aspectj"/>-->
    <!--<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager"
          p:defaultTimeout="1"
          p:dataSource-ref="dataSource" />-->


    <!--    <bean class="com.huawei.TestAnnoMainAnnoMain" abstract="true" autowire="default" depends-on="environment" lazy-init="default">
            <description>ac</description>
            <property name="" value="" ref=""/>
            <constructor-arg name="1" index="1" ref="1" type="1" value="1">
                &lt;!&ndash;<value type="">aa</value>&ndash;&gt;
            </constructor-arg>
            <qualifier type="" value=""/>
            &lt;!&ndash;<lookup-method name="toString" bean="com.huawei.TestAnno" />&ndash;&gt;
        </bean>

        <alias name="a" alias="b"/>
        <beans profile="">
            <bean name="" class=""/>
        </beans>-->


    <!-- 引入配置文件 -->
    <!--<bean id="propertyConfigurer"-->
    <!--class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">-->
    <!--<property name="locations">-->
    <!--<list>-->
    <!--<value>classpath*:jdbc.properties</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->

    <!-- dataSource 配置 -->
    <!--<bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource"-->
    <!--init-method="init" destroy-method="close">-->
    <!-- 基本属性 url、user、password -->
    <!--<property name="url" value="${jdbc.url}" />-->
    <!--<property name="username" value="${jdbc.username}" />-->
    <!--<property name="password" value="${jdbc.password}" />-->

    <!-- 配置初始化大小、最小、最大 -->
    <!--<property name="initialSize" value="1" />-->
    <!--<property name="minIdle" value="1" />-->
    <!--<property name="maxActive" value="20" />-->

    <!-- 配置获取连接等待超时的时间 -->
    <!--<property name="maxWait" value="60000" />-->

    <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
    <!--<property name="timeBetweenEvictionRunsMillis" value="60000" />-->

    <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
    <!--<property name="minEvictableIdleTimeMillis" value="300000" />-->

    <!--<property name="validationQuery" value="SELECT 'x'" />-->
    <!--<property name="testWhileIdle" value="true" />-->
    <!--<property name="testOnBorrow" value="false" />-->
    <!--<property name="testOnReturn" value="false" />-->

    <!-- 打开PSCache，并且指定每个连接上PSCache的大小 -->
    <!--<property name="poolPreparedStatements" value="false" />-->
    <!--<property name="maxPoolPreparedStatementPerConnectionSize"-->
    <!--value="20" />-->
    <!-- 配置监控统计拦截的filters -->
    <!--<property name="filters" value="stat" />-->
    <!--</bean>-->

    <!-- 配置使Spring采用CGLIB代理 -->
    <!--<aop:aspectj-autoproxy proxy-target-class="true" />-->

    <!-- Cache配置 -->
    <!--<cache:annotation-driven cache-manager="cacheManager" />-->
    <!--<bean id="ehCacheManagerFactory" class="org.springframework.cache.ehcache.EhCacheManagerFactoryBean"-->
    <!--p:configLocation="classpath:ehcache.xml" />-->
    <!--<bean id="cacheManager" class="org.springframework.cache.ehcache.EhCacheCacheManager"-->
    <!--p:cacheManager-ref="ehCacheManagerFactory" />-->

</beans>